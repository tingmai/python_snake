import pygame
import random

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 700
BLOCK_SIZE = 30
GRID_WIDTH = 10
GRID_HEIGHT = 20
COLORS = [
    (0, 0, 0),        # Black (empty)
    (255, 0, 0),      # Red
    (0, 150, 0),      # Green
    (0, 0, 255),      # Blue
    (255, 120, 0),    # Orange
    (255, 255, 0),    # Yellow
    (180, 0, 255),    # Purple
    (0, 220, 220)     # Cyan
]

# Tetromino shapes (I, O, T, S, Z, J, L)
SHAPES = [
    [[1, 5, 9, 13], [4, 5, 6, 7]],               # I
    [[4, 5, 8, 9], [4, 5, 8, 9]],                # O
    [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],  # T
    [[1, 2, 5, 6], [4, 5, 9, 10]],               # S
    [[1, 2, 4, 5], [5, 6, 8, 9]],                # Z
    [[0, 4, 5, 6], [1, 2, 5, 9], [4, 5, 6, 10], [1, 5, 8, 9]], # J
    [[2, 4, 5, 6], [1, 5, 9, 10], [4, 5, 6, 8], [0, 1, 5, 9]]  # L
]

class Tetris:
    def __init__(self):
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption("Tetris")
        self.grid = [[0] * GRID_WIDTH for _ in range(GRID_HEIGHT)]
        self.current_piece = None
        self.next_piece = random.randint(0, len(SHAPES)-1)
        self.score = 0
        self.game_over = False
        self.clock = pygame.time.Clock()
        self.fall_time = 0
        self.fall_speed = 0.3

    def new_piece(self):
        """Spawn new tetromino"""
        self.current_piece = {
            'shape': SHAPES[self.next_piece],
            'rotation': 0,
            'x': GRID_WIDTH // 2 - 2,
            'y': 0,
            'color': self.next_piece + 1
        }
        self.next_piece = random.randint(0, len(SHAPES)-1)
        if self.check_collision():
            self.game_over = True

    def check_collision(self):
        """Check if piece collides with grid boundaries or other blocks"""
        shape = self.current_piece['shape'][self.current_piece['rotation']]
        for i in range(4):
            for j in range(4):
                if i * 4 + j in shape:
                    x = self.current_piece['x'] + j
                    y = self.current_piece['y'] + i
                    if x < 0 or x >= GRID_WIDTH or \
                       y >= GRID_HEIGHT or \
                       (y >= 0 and self.grid[y][x]):
                        return True
        return False

    def lock_piece(self):
        """Lock piece in place and check for completed lines"""
        shape = self.current_piece['shape'][self.current_piece['rotation']]
        for i in range(4):
            for j in range(4):
                if i * 4 + j in shape:
                    x = self.current_piece['x'] + j
                    y = self.current_piece['y'] + i
                    if y >= 0:
                        self.grid[y][x] = self.current_piece['color']
        self.clear_lines()
        self.new_piece()

    def clear_lines(self):
        """Remove completed lines and update score"""
        lines_cleared = 0
        for i in range(len(self.grid)):
            if 0 not in self.grid[i]:
                lines_cleared += 1
                del self.grid[i]
                self.grid.insert(0, [0] * GRID_WIDTH)
        self.update_score(lines_cleared)

    def update_score(self, lines):
        """Scoring system"""
        scores = {1: 100, 2: 300, 3: 500, 4: 800}
        self.score += scores.get(lines, 0)

    def draw_grid(self):
        """Draw game grid"""
        for y in range(GRID_HEIGHT):
            for x in range(GRID_WIDTH):
                pygame.draw.rect(self.screen,
                               COLORS[self.grid[y][x]],
                               (x*BLOCK_SIZE+300, y*BLOCK_SIZE+50, 
                                BLOCK_SIZE-1, BLOCK_SIZE-1))

    def draw_piece(self):
        """Draw current falling piece"""
        shape = self.current_piece['shape'][self.current_piece['rotation']]
        for i in range(4):
            for j in range(4):
                if i * 4 + j in shape:
                    x = self.current_piece['x'] + j
                    y = self.current_piece['y'] + i
                    pygame.draw.rect(self.screen,
                                   COLORS[self.current_piece['color']],
                                   (x*BLOCK_SIZE+300, y*BLOCK_SIZE+50,
                                    BLOCK_SIZE-1, BLOCK_SIZE-1))

    def draw_score(self):
        """Display score on screen"""
        font = pygame.font.SysFont("comicsans", 40)
        text = font.render(f"Score: {self.score}", True, (255, 255, 255))
        self.screen.blit(text, (50, 50))

    def run(self):
        """Main game loop"""
        self.new_piece()
        while not self.game_over:
            self.screen.fill((0, 0, 0))
            self.fall_time += self.clock.get_rawtime()
            self.clock.tick()

            # Piece falling logic
            if self.fall_time / 1000 > self.fall_speed:
                self.fall_time = 0
                self.current_piece['y'] += 1
                if self.check_collision():
                    self.current_piece['y'] -= 1
                    self.lock_piece()

            # Event handling
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.game_over = True
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT:
                        self.current_piece['x'] -= 1
                        if self.check_collision():
                            self.current_piece['x'] += 1
                    if event.key == pygame.K_RIGHT:
                        self.current_piece['x'] += 1
                        if self.check_collision():
                            self.current_piece['x'] -= 1
                    if event.key == pygame.K_DOWN:
                        self.current_piece['y'] += 1
                        if self.check_collision():
                            self.current_piece['y'] -= 1
                    if event.key == pygame.K_UP:
                        self.current_piece['rotation'] = (self.current_piece['rotation'] + 1) % len(self.current_piece['shape'])
                        if self.check_collision():
                            self.current_piece['rotation'] = (self.current_piece['rotation'] - 1) % len(self.current_piece['shape'])

            # Rendering
            self.draw_grid()
            self.draw_piece()
            self.draw_score()
            pygame.display.flip()

        pygame.quit()

# Run the game
if __name__ == "__main__":
    game = Tetris()
    game.run()





-------------------












